C51 COMPILER V7.50   CUT                                                                   06/20/2018 01:44:18 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CUT
OBJECT MODULE PLACED IN cut.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE cut.C BROWSE DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /***********************************************  
   2                techer's exp
   3          ************************************************/  
   4          #include "MAIN.H" 
   5          
   6          
   7          uchar code SPACE[] = "                ";
   8          uchar code STUDENT_ID[] = "9A417018";
   9          
  10          uchar code MSG[7][16] ={"A Student ID RL ",  
  11                                  "B W CCW Rotate  ",  
  12                                  "C UP Counter 4  ",
  13                                  "D DOWN COUNTER 4",  
  14                                  "E ADC0 Voltage 3",  
  15                                  "F ADC0 Decimal  ",
  16                                  "G ADC0 Binary   "
  17                                  };
  18          uchar code MSGA[] = "C: TIME D: ADC0 ";  
  19          uchar code MSGB[] = "E: CNT  F: U/D  "; 
  20          
  21          uchar code MSGC[] = "TIME";
  22          uchar code MSGD[]={'2','0','1','8',0,' ','6',1,' ','8',2};
  23          
  24          uchar code MSGE[] = " MPC82G516 ADC0 ";
  25          
  26          uchar code FONT[] = {0x04,0x0F,0x12,0x0F,0x0A,0x1F,0x02,0x00,  //年
  27                               0x1F,0x11,0x1F,0x11,0x1F,0x11,0x11,0x00,  //月
  28                               0x1F,0x11,0x11,0x1F,0x11,0x11,0x1F,0x00}; //日
  29          uchar KEY_NO,K_TEMP;
  30          uchar OLD,MENUPTR,B_CNT,LCD_CNT;
  31          
  32          
  33          sbit  COLUMN4  = P2^0;
  34          sbit  COLUMN3  = P2^1;
  35          sbit  COLUMN2  = P2^2;
  36          sbit  COLUMN1  = P2^3;  
  37          sbit  ROW4     = P2^4;
  38          sbit  ROW3     = P2^5;
  39          sbit  ROW2     = P2^6;
  40          sbit  ROW1     = P2^7;
  41          
  42          uchar bdata  f; 
  43          sbit  T_FLAG      = f^0;
  44          sbit  T_ABLE      = f^1;
  45          sbit  Stu_FLAG    = f^2;
  46          
  47          uchar bdata  g; 
  48          sbit  ADC_FLAG = g^0;
  49          sbit  ADC_ABLE = g^1;
  50          sbit  ADC_HEX  = g^2;
  51          
  52          uchar bdata  h; 
  53          sbit  BE_FLAG  = h^0;
  54          
  55          uchar bdata  q;
C51 COMPILER V7.50   CUT                                                                   06/20/2018 01:44:18 PAGE 2   

  56          sbit  UP_FLAG     = q^0;
  57          sbit  UP_ABLE     = q^1;
  58          sbit  DOWN_FLAG   = q^2;
  59          sbit  DOWN_ABLE   = q^3;
  60          
  61          
  62          uchar SECOND,HOUR,MIN,SEC,ONESEC;
  63          int   count[9];
  64          
  65          
  66          void ROTP_INT(void) interrupt 0 using 1 //旋轉變碼器 按下
  67          {
  68   1      // uchar i;
  69   1         BEEP_PRO();
  70   1         f=0;g=0;q=0;
  71   1         switch (MENUPTR) {
  72   2            case 0:
  73   2               LCD_Cmd(0x01); Delay(5000);  
  74   2               LCD_Cmd(0x0C); //LCD_Cmd(0x86);
  75   2               Stu_FLAG=1;
  76   2               break;
  77   2            case 1:     
  78   2               break;
  79   2            case 2:
  80   2               LCD_Cmd(0x01); Delay(5000);  
  81   2               LCD_Cmd(0x0C); //LCD_Cmd(0x86);
  82   2               
  83   2               UP_ABLE = 1;
  84   2               break;
  85   2            case 3:
  86   2               LCD_Cmd(0x01); Delay(5000);  
  87   2               LCD_Cmd(0x0C); //LCD_Cmd(0x86);
  88   2      
  89   2               DOWN_ABLE = 1;
  90   2               break;
  91   2            case 4:         
  92   2               break;
  93   2            case 5:
  94   2               break;
  95   2            case 6:
  96   2               break;
  97   2            default:
  98   2               break;
  99   2         }
 100   1         while (ROTP==0);
 101   1      }
 102          
 103          void T0_INT(void) interrupt 1 using 2 
 104          {
 105   1         if (BE_FLAG==1) {
 106   2            B_CNT--;
 107   2            if (B_CNT==0) {BE_FLAG=0; TR0=0; BEEP=1;}
 108   2         }
 109   1      }
 110          
 111          void KEY_INT(void) interrupt 2 using 1
 112          {
 113   1         uchar COD_TMP;
 114   1         SCAN_ON();
 115   1         if (K_TEMP==0xFF) {P2=0xF0; return;}
 116   1         COD_TMP=K_TEMP;
 117   1         Delay(5000);
C51 COMPILER V7.50   CUT                                                                   06/20/2018 01:44:18 PAGE 3   

 118   1         SCAN_ON();
 119   1         if (K_TEMP==0xFF) {P2=0xF0; return;}
 120   1         if (COD_TMP!=K_TEMP) {KEY_NO=0xFF; P2=0xF0; return;}
 121   1         SCAN_OFF();
 122   1         KEY_PRO();
 123   1      }
 124          
 125          void T2_INT(void) interrupt 5 using 3
 126          {
 127   1         TF2=0;
 128   1         SECOND--;
 129   1         if (SECOND>0) return;
 130   1         SECOND=10;  
 131   1         // 0.1 sec 
 132   1         if(UP_ABLE == 1) UP_FLAG =1;
 133   1         if(DOWN_ABLE == 1) DOWN_FLAG =1;
 134   1         ONESEC--;
 135   1         if (ONESEC>0) return;
 136   1         ONESEC=10; TIME_INC();         
 137   1         if (T_ABLE==1) T_FLAG=1;       // 1 sec 
 138   1      } 
 139          
 140          void MAIN(void)
 141          {
 142   1         uchar i,j,k;
 143   1         EN=0; f=0; g=0; h=0;    
 144   1         TMOD=2; TH0=0; TL0=0;
 145   1         SECOND=10; // SECOND=100, 1秒
 146   1         ONESEC=10;
 147   1         T2CON=0;   // T2 16 BIT Timer 
 148   1                    // Fosc=22.1184MHz，Timer時脈=Fosc/12=1.8432MHz
 149   1                    // Timer延時時間=(1/1.8432MHz)*18432=10000uS=10ms  
 150   1         TH2=(65536-18432)>>8; TL2=(65536-18432); TR2=1; // 10ms 
 151   1         RCAP2H=(65536-18432)>>8; RCAP2L=(65536-18432); 
 152   1      
 153   1         Init_LCD(); 
 154   1         j=ROTA; k=ROTB; OLD=k*2+j; 
 155   1         MENUPTR=0; MENU_DISP();
 156   1         HOUR=0; MIN=0; SEC=0;
 157   1         P2=0xF0;
 158   1         EX0=1; IT0=1;      // ROTARY PUSH BUTTON
 159   1         EX1=1;
 160   1         ET0=1; PT0=1;  
 161   1         ET2=1; PT2=1;
 162   1         EA=1;
 163   1         while (1) {
 164   2            ROT_SCAN(10);
 165   2            if (Stu_FLAG==1)
 166   2            {
 167   3               ID_Shift();
 168   3            }
 169   2            else if(UP_FLAG==1)
 170   2            {
 171   3               for(i=0;i<9;i++)count[i]=0;
 172   3               UP_COUNTER( 0 , 999999999 );
 173   3               //UP_FLAG=0;
 174   3            }
 175   2            else if(DOWN_FLAG==1)
 176   2            {
 177   3               for(i=0;i<9;i++)count[i]=9;
 178   3               DOWN_COUNTER( 0 , 999999999 );
 179   3               //DOWN_FLAG=0;
C51 COMPILER V7.50   CUT                                                                   06/20/2018 01:44:18 PAGE 4   

 180   3            }
 181   2         }
 182   1      }
 183          
 184          void BEEP_PRO(void)
 185          {
 186   1         B_CNT=0; BE_FLAG=1; 
 187   1         BEEP=0; TR0=1;
 188   1      }
 189          
 190          void MENU_DISP(void)
 191          {
 192   1         uchar i;
 193   1         f=0; g=0;q=0;
 194   1         LCD_Cmd(0x80); 
 195   1         for (i=0; i<16; i++) Send_Data(MSG[MENUPTR%7][i]); 
 196   1         LCD_Cmd(0xC0); 
 197   1         for (i=0; i<16; i++) Send_Data(MSG[(MENUPTR+1)%7][i]); 
 198   1      }
 199          
 200          void HELP(void)
 201          {
 202   1         uchar i;
 203   1         f=0; g=0;
 204   1         LCD_Cmd(1); Delay(5000);
 205   1         LCD_Cmd(0x0C); LCD_Cmd(0x80);            
 206   1         for (i=0; i<16; i++) Send_Data(MSGA[i]);    
 207   1         LCD_Cmd(0xC0);                
 208   1         for (i=0; i<16; i++) Send_Data(MSGB[i]);  
 209   1      }
 210          
 211          void TIME_INC(void)
 212          {
 213   1         SEC+=1; 
 214   1         if (SEC < 60) return; 
 215   1         SEC=0; MIN+=1;
 216   1         if (MIN < 60) return;
 217   1         MIN=0; HOUR+=1;
 218   1         if (HOUR < 24) return;
 219   1         HOUR=0;  
 220   1      }
 221          
 222          void TIME_DISP(void)
 223          {
 224   1         uchar i,j;
 225   1         LCD_Cmd(0xC4); LCD_Cmd(0x0C);
 226   1      
 227   1         j=HOUR; i=j/10; 
 228   1         if (i==0) i=0x20;
 229   1         else i+=0x30;
 230   1         Send_Data(i);
 231   1         j%=10; j+=0x30;
 232   1         Send_Data(j); Send_Data(':');
 233   1      
 234   1         j=MIN; i=j/10; 
 235   1         if (i==0) i=0x20;
 236   1         else i+=0x30;
 237   1         Send_Data(i);
 238   1         j%=10; j+=0x30;
 239   1         Send_Data(j); Send_Data(':');
 240   1      
 241   1         j=SEC; i=j/10; 
C51 COMPILER V7.50   CUT                                                                   06/20/2018 01:44:18 PAGE 5   

 242   1         if (i==0) i=0x20;
 243   1         else i+=0x30;
 244   1         Send_Data(i);
 245   1         j%=10; j+=0x30;
 246   1         Send_Data(j);
 247   1      }
 248          
 249          void KEY_PRO(void)
 250          {
 251   1         uchar i;
 252   1         P2=0x0F0;
 253   1         f=0;g=0;q=0;
 254   1         BEEP_PRO();
 255   1         switch (KEY_NO)
 256   1         {
 257   2            case 0x0A: 
 258   2      
 259   2               break;   
 260   2            case 0x0B: 
 261   2      
 262   2               break;
 263   2            case 0x0C:
 264   2               LCD_Cmd(0x01); Delay(5000);  
 265   2               LCD_Cmd(0x0C); LCD_Cmd(0x86);
 266   2               for (i=0; i<4; i++) Send_Data(MSGC[i]);  
 267   2               LCD_Cmd(0xC4);     
 268   2               TIME_DISP(); T_ABLE=1;
 269   2               break;                   
 270   2            case 0x0D: 
 271   2      
 272   2               break;
 273   2            case 0x0E: 
 274   2      
 275   2               break;
 276   2            case 0x0F: 
 277   2      
 278   2               break;
 279   2            default:
 280   2               break;                  
 281   2         }
 282   1      }
 283          
 284          void ID_Shift(void)
 285          {
 286   1         uchar i,j;
 287   1         LCD_Cmd(0x84);
 288   1         for (i=0; i<8; i++){
 289   2            ROT_SCAN(10);
 290   2            if(Stu_FLAG==0)return;
 291   2            Send_Data(STUDENT_ID[i]);
 292   2         }
 293   1         for(i=0;i<4;i++){
 294   2            ROT_SCAN(10);
 295   2            if(Stu_FLAG==0)return;
 296   2            LCD_Cmd(0xC0);
 297   2            for(j=i;j<4;j++){
 298   3               ROT_SCAN(10);
 299   3               if(Stu_FLAG==0)return;
 300   3               Send_Data(SPACE[j]);
 301   3            }
 302   2            for(j=0;j<8;j++){
 303   3               ROT_SCAN(10);
C51 COMPILER V7.50   CUT                                                                   06/20/2018 01:44:18 PAGE 6   

 304   3               if(Stu_FLAG==0)return;
 305   3               Send_Data(STUDENT_ID[j]);
 306   3            }
 307   2            for(j=0;j<i;j++){
 308   3               ROT_SCAN(10);
 309   3               if(Stu_FLAG==0)return;
 310   3               Send_Data(SPACE[j]);
 311   3            }
 312   2            ROT_SCAN(50000);
 313   2         }
 314   1         while(1){
 315   2            ROT_SCAN(10);
 316   2            if(Stu_FLAG==0)return;
 317   2            LCD_Cmd(0xC0);
 318   2            for(i=0;i<8;i++){
 319   3               ROT_SCAN(10);
 320   3               if(Stu_FLAG==0)return;
 321   3               LCD_Cmd(0xC0);
 322   3               for(j=0;j<i;j++){
 323   4                  ROT_SCAN(10);
 324   4                  if(Stu_FLAG==0)return;
 325   4                  Send_Data(SPACE[j]);
 326   4               }
 327   3               for(j=0;j<8;j++){
 328   4                  ROT_SCAN(10);
 329   4                  if(Stu_FLAG==0)return;
 330   4                  Send_Data(STUDENT_ID[j]);
 331   4               }
 332   3               for(j=i;j<8;j++){
 333   4                  ROT_SCAN(10);
 334   4                  if(Stu_FLAG==0)return;
 335   4                  Send_Data(SPACE[j]);
 336   4               }
 337   3               ROT_SCAN(50000);
 338   3               if(Stu_FLAG==0)return;
 339   3            }
 340   2            ROT_SCAN(10);
 341   2            LCD_Cmd(0xC0);
 342   2            for(i=0;i<16;i++){
 343   3               ROT_SCAN(10);
 344   3               if(Stu_FLAG==0)return;
 345   3               Send_Data(SPACE[i]);
 346   3            }
 347   2            for(i=0;i<8;i++){
 348   3               ROT_SCAN(10);
 349   3               if(Stu_FLAG==0)return;
 350   3               LCD_Cmd(0xC0);
 351   3               for(j=i;j<8;j++){
 352   4                  ROT_SCAN(10);
 353   4                  if(Stu_FLAG==0)return;
 354   4                  Send_Data(SPACE[j]);
 355   4               }
 356   3               for(j=0;j<8;j++){
 357   4                  ROT_SCAN(10);
 358   4                  if(Stu_FLAG==0)return;
 359   4                  Send_Data(STUDENT_ID[j]);
 360   4               }
 361   3               for(j=0;j<i;j++){
 362   4                  ROT_SCAN(10);
 363   4                  if(Stu_FLAG==0)return;
 364   4                  Send_Data(SPACE[j]);
 365   4               }
C51 COMPILER V7.50   CUT                                                                   06/20/2018 01:44:18 PAGE 7   

 366   3               ROT_SCAN(50000);
 367   3               if(Stu_FLAG==0)return;
 368   3            }
 369   2         }
 370   1      }
 371          
 372          
 373          void UP_COUNTER( uint min , uint max )
 374          {
 375   1         uint len = sizeof(count)/sizeof(count[0]);
 376   1         int *p_count = &count;
 377   1         uint i,j,mask;
 378   1         for(i =min;i<max;i++)
 379   1         {
 380   2            LCD_Cmd(0xC0);
 381   2            ROT_SCAN(10);
 382   2            if(UP_FLAG==0)return;
 383   2            CALL_UP( p_count , len );//
*** WARNING C182 IN LINE 383 OF CUT.C: pointer to different objects
 384   2            for(j=0;j<len;j++)
 385   2            {
 386   3               ROT_SCAN(10);
 387   3               if(UP_FLAG==0)return;
 388   3               for(i=0;i<len;i++)
 389   3               {
 390   4                  ROT_SCAN(10);
 391   4                  if(UP_FLAG==0)return;
 392   4                  if(p_count[i]!=0)//
 393   4                  {
 394   5                     mask=i;
 395   5                     break;
 396   5                  }
 397   4               }
 398   3               for(i=0;i<len;i++)
 399   3               {
 400   4                  ROT_SCAN(10);
 401   4                  if(UP_FLAG==0)return;
 402   4                  if(i<mask)
 403   4                  {
 404   5                     Send_Data(' ');
 405   5                  }
 406   4                  else
 407   4                  {
 408   5                     Send_Data('0'+p_count[i]);//
 409   5                  }
 410   4               }
 411   3               ROT_SCAN(50000);
 412   3               if(UP_FLAG==0)return;
 413   3            }
 414   2         }
 415   1      }
 416          
 417          void DOWN_COUNTER( uint min , uint max )
 418          {
 419   1         uint len = sizeof(count)/sizeof(count[0]);
 420   1         int *p_count = &count;
 421   1         uint i,j,mask;
 422   1         for(i =min;i<max;i++)
 423   1         {
 424   2            LCD_Cmd(0xC0);
 425   2            ROT_SCAN(10);
 426   2            if(DOWN_FLAG==0)return;
C51 COMPILER V7.50   CUT                                                                   06/20/2018 01:44:18 PAGE 8   

 427   2            CALL_DOWN( p_count , len );//
*** WARNING C182 IN LINE 427 OF CUT.C: pointer to different objects
 428   2            for(j=0;j<len;j++)
 429   2            {
 430   3               ROT_SCAN(10);
 431   3               if(DOWN_FLAG==0)return;
 432   3               for(i=0;i<len;i++)
 433   3               {
 434   4                  ROT_SCAN(10);
 435   4                  if(DOWN_FLAG==0)return;
 436   4                  if(p_count[i]!=0)//
 437   4                  {
 438   5                     mask=i;
 439   5                     break;
 440   5                  }
 441   4               }
 442   3               for(i=0;i<len;i++)
 443   3               {
 444   4                  ROT_SCAN(10);
 445   4                  if(DOWN_FLAG==0)return;
 446   4                  if(i<mask)
 447   4                  {
 448   5                     Send_Data(' ');
 449   5                  }
 450   4                  else
 451   4                  {
 452   5                     Send_Data('0'+p_count[i]);//
 453   5                  }
 454   4               }
 455   3               ROT_SCAN(50000);
 456   3               if(DOWN_FLAG==0)return;
 457   3            }
 458   2         }
 459   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2021    ----
   CONSTANT SIZE    =    229    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     33      34
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
